#clang-format支持两种提供自定义样式选项的方法
#1. 在命令行选项中直接通过-style =指定样式配置
#```
#clang-format -style=llvm test.m
#```
#2. 在项目目录中创建.clang-format或_clang-format文件用来存放自定义样式配置选项,并通过命令行选项-style=file指定自定义文件
#```
#clang-format -style=file test.m
#```
#.clang-format 文件使用 YAML 格式
#

#
#基于那个模板: LLVM/Google/Chromium/Mozilla/WebKit
BasedOnStyle: LLVM

# 每行字符的限制
ColumnLimit: 80


AlignEscapedNewlines: Left
# 访问说明符的偏移(public private)
# =0
# ```
#@private
#@property (nonatomic,strong)NSString *str;
# ```
# =4
# ```
#     @private
#@property (nonatomic,strong)NSString *str;
# ```
AccessModifierOffset: 4



# 括号之后,水平对齐参数: Align DontAlign AlwaysBreak
AlignAfterOpenBracket: Align


# 水平对齐二元和三元表达式的操作数
AlignOperands: false



# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false


# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: false



# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false



# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: Empty


# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: false
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: false

# 在构造函数的初始化列表的冒号之后换行
BreakConstructorInitializers: AfterColon


# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 8
# 延续的行的缩进宽度
ContinuationIndentWidth: 8


# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: true
# true 自动检测补全命名空间尾部的大括号
FixNamespaceComments: true
# case 是否缩进一级
IndentCaseLabels: false

# 缩进宽度
IndentWidth: 4
# 连续最大空行数
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None
PenaltyBreakAssignment: 2
# 在call(后对函数调用换行的处罚
PenaltyBreakBeforeFirstCallParameter: 1
# 在一个注释中引入换行的处罚
PenaltyBreakComment: 500
# 第一次在<<前换行的处罚
PenaltyBreakFirstLessLess: 120
# 在一个字符串字面量中引入换行的处罚
PenaltyBreakString: 1000
# 对于每个在行字符数限制之外的字符的处罚
PenaltyExcessCharacter: 1000000
# 将函数的返回类型放到它自己的行的处罚
PenaltyReturnTypeOnItsOwnLine: 400
# 指针和引用的对齐: Left（int* a;）, Right（int *a;）, Middle（int * a;）
PointerAlignment: Left
# 允许排序#include,首字母排序
SortIncludes: false





#指针的*的挨着哪边
PointerAlignment: Right 

#缩进宽度
IndentWidth: 4
 
# 连续的空行保留几行
MaxEmptyLinesToKeep: 1
 

# 是否允许短方法单行
AllowShortFunctionsOnASingleLine: true

# 是否允许短if单行 If true, if (a) return; 可以放到同一行
AllowShortIfStatementsOnASingleLine: true

# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None

# 总是在template声明后换行
AlwaysBreakTemplateDeclarations: true

# 中括号两边空格 [] 
SpacesInSquareBrackets: true
 
# 小括号两边添加空格
SpacesInParentheses : false

#Objective-C
# 在 @property 后面添加空格, \@property (readonly) 而不是 \@property(readonly).
ObjCSpaceAfterProperty: true
 
# OC block后面的缩进
ObjCBlockIndentWidth: 4
 
 
#注释对齐  疑问??  
AlignTrailingComments: true
 
# 换行的时候对齐操作符
AlignOperands: true
 
#多行声明语句按照=对齐
AlignConsecutiveDeclarations: true
 




#连续的赋值语句以 = 为中心对齐
#```
#int aaa = 120
#int b   = 23
#int cc  = 23
#```
AlignConsecutiveAssignments: true
 
 
#等号两边的空格
SpaceBeforeAssignmentOperators: true
 
 
# 容器类的空格 例如 OC的字典
SpacesInContainerLiterals: true
 
 
#缩进
IndentWrappedFunctionNames: true
 
 
#在block从空行开始
KeepEmptyLinesAtTheStartOfBlocks: true
 
#在构造函数初始化时按逗号断行，并以冒号对齐
BreakConstructorInitializersBeforeComma: true
 
 
#函数参数换行
AllowAllParametersOfDeclarationOnNextLine: true
 
#括号后添加空格
SpaceAfterCStyleCast: true
 
 
#tab键盘的宽度
TabWidth: 4
UseTab: Never
